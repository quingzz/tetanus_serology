---
title: "Tetanus sero data"
toc: TRUE
---

## Concentration

```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(gt)
library(mgcv)

all_tetanus <- readRDS("data/preprocessed/all_samples.rds")
```

There is currently no specific threshold to classify tetanus serostatus, for this analysis, a conservative threshold of 0.1IU/ml is used.

```{r}
# threshold to be considered positive
positive_threshold <- 0.1
```

### Preprocess data

-   Label whether it is oucru or hcdc sample

-   Label the collection period for samples from each source

-   Compute rounded age

-   Compute concentration

    -   Use `median` value to compute where available, use `lower` or `upper` otherwise
    -   Concentration is computed by `titer*dilution_fct` where titer is the predicted "concentration" from the standard curve.

-   Label whether the sample is considered positive using 0.1IU/ml threshold

    -   If concentration is not available --\> the OD is either too high or too low, in which case seropositivity is determined by which extreme it is closer to (i.e., if OD closer to 0, label as negative and label as positive when OD is closer to 4)

Also filter samples from HCMC only

```{r}
#| code-fold: true
#| code-summary: "Code for preprocessing data"
preprocessed_data <- all_tetanus %>% 
  mutate(
    log_concentration = case_when(
      !is.na(median) ~ median,
      !is.na(upper) ~ upper,
      !is.na(lower) ~ lower,
      .default = NA
    ),
    concentration = (10^log_concentration)*dilution_factors,
    serostatus = if_else(
      !is.na(concentration),
      # if concentration available, determine positivity using threshold
      if_else(concentration >= 0.1, "positive", "negative"),
      # if concentration not available, determine positivity using OD
      # if result closer to OD upper bound, it is positive
      if_else((4 - result) < (result - 0), "positive", "negative")
    ),
    source = if_else(str_detect(sample_id, "^U"), "hcdc", "oucru"),
    age = case_when(
      !is.na(dob) ~ as.double(difftime(date_collection, dob, unit = "days"))/365.25,
      !is.na(exact_age) ~ exact_age, 
      !is.na(age_min) ~ age_min,
      !is.na(age_max) ~ age_max,
      .default = NA
    ),
    rounded_age = round(age)
  ) %>% 
  filter(
    province %in% c("HCMC", "Hồ Chí Minh", "HỒ CHÍ MINH")
  ) %>% group_by(source) %>% 
  mutate(
    time_durr = paste0(
      format(min(date_collection), "%Y/%m"), 
      " - ", 
      format(max(date_collection), "%Y/%m"))
  ) %>% 
  ungroup() 
```

### Different dilutions

Visualize distribution of concentration at different dilution levels and the positive threshold

```{r warning=FALSE}
#| code-fold: true
#| code-summary: "Plot distribution of log concentration at different dilutions"
preprocessed_data %>% 
  ggplot() +
    geom_density(
      aes(
        x = concentration,
        color = time_durr
      )
    ) +
    geom_vline(
      aes(
        xintercept = positive_threshold
      ),
      color = "green",
      linetype = "dashed"
    ) +
    scale_x_log10() +
    facet_wrap(~ dilution_factors) +
    labs(
      color = "Collection period"
    )
```

```{r}
# which dilution factor for the following analyses
dilution_fct <- 200
```

### Concentration by collection period

::: panel-tabset
## Density plot

Distribution of concentration for each age group

```{r warning=FALSE}
#| code-fold: true
#| code-summary: "Plot distribution of concentration stratified by age"
preprocessed_data %>% 
  filter(
    rounded_age <= 15,
    dilution_factors == dilution_fct
    ) %>% 
  ggplot() +
    geom_density(
      aes(
        x = concentration,
        color = time_durr
      )
    ) +
    geom_vline(
      aes(xintercept = positive_threshold),
      color = "green",
      linetype = "dashed"
    ) +
    scale_x_log10()+
    facet_wrap(~ rounded_age, scales = "free_y") + 
    labs(
      color = "Collection period"
    )
```

## Boxplot

Box plot of concentration per age group

```{r warning=FALSE}
#| code-fold: true
#| code-summary: "Code for box plot of concentration"
preprocessed_data %>% 
  filter(
    rounded_age <= 15,
    dilution_factors == dilution_fct
    ) %>% 
  ggplot() +
    geom_jitter(
        aes(
          x = source,
          y = concentration,
          color = time_durr
        ),
        alpha = 0.2
      ) +
    geom_boxplot(
      aes(
        x = source,
        y = concentration,
        color = time_durr
      ),
      fill = NA
    ) +
    geom_hline(
      aes(yintercept = positive_threshold),
      color = "green",
      linetype = "dashed"
    ) +
    scale_y_log10()+
    facet_wrap(~ rounded_age, scales = "free_y")+
    labs(
        color = "Collection period"
      )
```

## Regression plot

```{r warning=FALSE}
#| code-fold: true
#| code-summary: "Code for plotting concentration over age"
preprocessed_data %>% 
  filter(
    rounded_age <= 15,
    dilution_factors == dilution_fct
    ) %>% 
  ggplot() +
    geom_point(
          aes(
            x = age,
            y = concentration,
            color = time_durr
          ),
          alpha = 0.2
        ) +
    geom_smooth(
        aes(
          x = age,
          y = concentration,
          color = time_durr,
          fill = time_durr
        ),
        method = "loess"
      ) +
    geom_hline(
      aes(yintercept = positive_threshold),
      color = "green",
      linetype = "dashed"
    ) +
    scale_y_log10() +
    labs(
        color = "Collection period"
      ) + 
    guides(fill = "none")
```
:::

***Note:***

-   There are no samples for age groups `3 - 5` and `12 - 15` during the 2012-2016 collection period

The following table summarizes number of samples for each rounded age from each collection period

```{r}
#| code-fold: true
#| code-summary: "Check sample size for each age-group"
preprocessed_data %>% 
  filter(
    rounded_age <= 15,
    dilution_factors == dilution_fct
    ) %>% 
  group_by(time_durr, rounded_age) %>% 
  count() %>% 
  pivot_wider(
    names_from = time_durr,
    values_from = n
  ) %>% 
  arrange(rounded_age)
```

### Stratified by age group

Separate the data into 2 age groups: `<3` and `7-12` for comparison

```{r}
#| code-fold: true
#| code-summary: "Compute age group for stratification"
data_by_agegrp <- preprocessed_data %>%
  mutate(
    age_group = case_when(
      age < 3 ~ "< 3",
      age >= 7 & age <= 12 ~ "7-12",
      .default = NA
    )
  ) %>% 
  filter(
    !is.na(age_group),
    dilution_factors == dilution_fct
  ) 
```

Perform two samples Wilcoxon test to compare distribution of concentration (on log scale) of 2 age groups (`<3`, `7-12`) between samples from 2 collection periods

```{r}
#| code-fold: true
#| code-summary: "Perform wilcoxon test to compare log concentration for 2 age groups"
concentration_by_agegrp <- data_by_agegrp %>% 
  filter(!is.na(concentration)) %>% 
  group_by(
    age_group
  ) %>% 
  nest() %>% # divide the data.frame by each age group
  mutate(
    # perform t.test to compare samples from each source
    # t_test = map(data, 
    #   ~ t.test(
    #     log_concentration ~ source, data = .x
    #   )
    # ),
    # p_value = map_dbl(t_test, ~.x$p.value),
    # perform two-sample wilcoxon test instead to compare samples from each source
    wilcox = map(data, 
      ~ t.test(
        log_concentration ~ time_durr, data = .x
      )
    ),
    p_value = map_dbl(wilcox, ~.x$p.value),
    # compute summary for samples from each source (HCDC and OUCRU)
    dat_summary = map(data, \(dat){
      dat %>% 
        group_by(time_durr) %>% 
        summarize(
          median_concentration = median(concentration),
          lwr = quantile(concentration, probs = 0.25),
          upper = quantile(concentration, probs = 0.75)
        ) %>% 
        mutate(
          label = sprintf("%.4f (%.4f–%.4f)",
          median_concentration,
          lwr,
          upper),
          .keep = "unused"
        )
    }
    )
  ) %>% 
  unnest(
    dat_summary
  ) %>% 
  pivot_wider(
    names_from = time_durr,
    values_from = label
  )
```

```{r}
#| code-fold: true
#| code-summary: "Generate the comparison table"
concentration_by_agegrp %>%
  select(-wilcox, -data) %>% 
  relocate(p_value, .after = last_col()) %>% 
  ungroup() %>% 
  gt(rowname_col = "age_group") %>%
  tab_header(title = "Log(concentration) by collection period and age group") %>% 
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = list(
      cells_column_labels(everything()), 
      cells_stub()
    )
  )
```

***Note:***

-   The result suggests that for both age groups, there is no statistically significant difference in the `log(concentration)` of samples between the 2 collection periods.

The following plots demonstrate the distribution of log(concentration)

::: panel-tabset
## Density plot

```{r}
#| code-fold: true
#| code-summary: "Generate the density plot"
concentration_by_agegrp %>%
  unnest(data) %>% 
  ggplot() +
    geom_density(
      aes(
        x = concentration,
        color = time_durr
      )
    ) +
    geom_vline(
      aes(xintercept = positive_threshold),
      color = "green",
      linetype = "dashed"
    ) +
    scale_x_log10() +
    facet_wrap(~ age_group, scales = "free_y") +
    labs(
        color = "Collection period"
      ) 
```

## Box plot

```{r}
#| code-fold: true
#| code-summary: "Generate the box plot"
concentration_by_agegrp %>%
  unnest(data) %>% 
  ggplot() +
    geom_jitter(
        aes(
          x = time_durr,
          y = concentration,
          color = time_durr
        ),
        alpha = 0.2
      ) +
    geom_boxplot(
      aes(
        x = time_durr,
        y = concentration,
        color = time_durr
      ),
      fill = NA
    ) +
    geom_hline(
      aes(yintercept = positive_threshold),
      color = "green",
      linetype = "dashed"
    ) +
    scale_y_log10() +
    labs(
        color = "Collection period"
      ) +
    facet_wrap(~ age_group, scales = "free_y")
```
:::

## Seroprevalence

### Comparison table

```{r warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Compute prevalence and confidence interval"
prevalence_by_agegrp <- data_by_agegrp %>% 
  group_by(
    time_durr, age_group
  ) %>% 
  summarize(
    seropositive = sum(serostatus == "positive"),
    sample_size = sum(!is.na(serostatus))
  ) %>% 
  rowwise() %>% 
  mutate(
    seroprevalence = seropositive/sample_size,
    seroprevalence_ci = list(
      prop.test(
      x = seropositive, n = sample_size,
      conf.level = 0.95)$conf.int
    ),
    seroprevalence_lwr = seroprevalence_ci[[1]],
    seroprevalence_upper = seroprevalence_ci[[2]]
  ) %>% 
  ungroup()
```

Seroprevalence with confidence intervals

```{r}
#| code-fold: true
#| code-summary: "generate the table"
prevalence_by_agegrp %>%
  mutate(
    label = sprintf("%.1f%% (%.1f–%.1f%%)",
        100 * seroprevalence,
        100 * seroprevalence_lwr,
        100 * seroprevalence_upper)
  ) %>% 
  select(time_durr, age_group, label) %>%
  pivot_wider(names_from = time_durr,
              values_from = label) %>%
  gt(rowname_col = "age_group") %>%
  tab_header(title = "Seroprevalence by collection period and age group") %>% 
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = list(
      cells_column_labels(everything()), 
      cells_stub()
    )
  )
```

Comparison tables with p-value. Only samples from the 2 age groups `<3` and `7-12` are included.

::: panel-tabset
## Overall

Chi-squared test

```{r warning=FALSE}
#| code-fold: true
#| code-summary: "generate the summary table"
library(gtsummary)

data_by_agegrp %>% 
  select(serostatus, time_durr) %>% 
  tbl_summary(
    by = time_durr,          
    type = all_categorical() ~ "categorical",
    missing = "no"
  ) %>%
  add_p(test = everything() ~ "chisq.test") %>%  
  add_n() %>%                                    
  bold_labels()
```

## By age group

```{r}
#| code-fold: true
#| code-summary: "perform Fisher exact test"

prevalence_compare <- data_by_agegrp %>% 
  group_by(
    age_group
  ) %>% 
  nest() %>% # divide the data.frame by each age group
  mutate(
    # perform fisher.test to compare samples from each source
    fisher_test = map(data, 
      \(df){
        tab <- table(df$serostatus, df$time_durr)
        fisher.test(tab)
      }
    ),
    fisher_test_p = map_dbl(fisher_test, ~.x$p.value),
    odd_ratio = map_chr(fisher_test, \(out){
      sprintf("%.3f (%.3f–%.3f)",
        out$estimate,
        out$conf.int[1],
        out$conf.int[2])
    }),
    # compute summary for samples from each source (HCDC and OUCRU)
    dat_summary = map(data, \(dat){
      dat %>% 
        group_by(time_durr) %>% 
        summarize(
          label = paste0(sum(serostatus == "positive"), "/", n())
        )
    }
    )
  ) %>% 
  unnest(
    dat_summary
  ) %>% 
  ungroup() %>% 
  pivot_wider(
    names_from = time_durr,
    values_from = label
  )
```

Check the negative-positive counts for each age group

```{r}
map(prevalence_compare$data, 
  \(df){
    table(df$serostatus, df$time_durr)
})
```

Comparison table with p-value from the Fisher exact test

```{r}
#| code-fold: true
#| code-summary: "generate the table"
prevalence_compare %>%
  select(-data, -fisher_test) %>%
  relocate(odd_ratio, fisher_test_p, .after = last_col()) %>% 
  rename(
    p_val = fisher_test_p,
    `2023/03 - 2023/12 (pos/tot)` = `2023/03 - 2023/12`,
    `2012/01 - 2016/06 (pos/tot)` = `2012/01 - 2016/06`,
    `Odd ratio (95% CI)` = odd_ratio
  ) %>% 
  gt(rowname_col = "age_group") %>%
  tab_header(title = "Compare prevalence by collection period and age group") %>% 
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = list(
      cells_column_labels(everything()),
      cells_stub()
    )
  ) %>%
  fmt_number(
    columns = where(is.numeric),
    decimals = 4
  )
```
:::

### Age stratified seroprevalence

```{r}
#| code-fold: true
#| code-summary: "Helper function to compute age-stratified aggregated seroprev"

compute_seroprev <- function(data, age_lim, dilution_fct, group_var){
  if(!is.null(group_var)){
    out <- data %>% 
      filter(age<=age_lim, dilution_factors == dilution_fct) %>% 
      mutate(
        serostatus = if_else(serostatus == "positive", 1, 0),
        !! group_var := factor(.data[[group_var]])
      ) %>% 
      group_by(rounded_age, .data[[group_var]]) %>% 
      summarize(
        pos = sum(serostatus, na.rm = TRUE),
        tot = n(),
        neg = tot - pos,
        seroprev = sum(serostatus, na.rm = TRUE)/n()
      ) %>% 
      ungroup()
  }else{
    out <- data %>% 
      filter(age<=age_lim, dilution_factors == dilution_fct) %>% 
      mutate(
        serostatus = if_else(serostatus == "positive", 1, 0)
      ) %>% 
      group_by(rounded_age) %>% 
      summarize(
        pos = sum(serostatus, na.rm = TRUE),
        tot = n(),
        neg = tot - pos,
        seroprev = sum(serostatus, na.rm = TRUE)/n()
      ) %>% 
      ungroup()
  }
  
  out
}
```

Check whether there is a difference in seroprevalence between:

-   samples from the 2 collection periods

-   female and male samples

::: panel-tabset
## Collection period

```{r message = FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Model stratified by collection period"

# ----- Model with smoothing stratified by collection period ------
seroprev_mod_coll <- preprocessed_data %>% 
  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = "time_durr") %>% 
  gam(cbind(pos, neg) ~ s(rounded_age, bs = "bs", by = time_durr) + time_durr, data = ., family=binomial(link = "logit"))
summary(seroprev_mod_coll)
```

## Gender

```{r message = FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Model stratified by gender"

# ----- Model with smoothing stratified by gender ------
seroprev_mod_gender <- preprocessed_data %>% 
  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = "gender") %>% 
  gam(cbind(pos, neg) ~ s(rounded_age, bs = "bs", by = gender) + gender, data = ., family=binomial(link = "logit"))
summary(seroprev_mod_gender)
```

## No stratification

```{r message = FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Model without stratification for smoothing"
# ----- Baseline model (no stratification) ------
seroprev_mod <- preprocessed_data %>% 
  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = NULL) %>%
  gam(cbind(pos, neg) ~ s(rounded_age, bs = "bs"), data = ., family=binomial(link = "logit"))
summary(seroprev_mod)
```
:::

***Note:***

The result from model stratified by (sample) source suggests that:

-   There's no statistically significant difference in seroprevalence between the samples from these 2 sampling period

The result from model stratified by gender suggests that:

-   There's no statistically significant difference in seroprevalence between male and female samples

However, it may be due to the fact that the sample size for the earlier collection period (using OUCRU samples) is quite small and we don't have any data for several age groups (`3-6`, `11-14`)

Another issue is that there is an imbalance in the number of male vs female samples during later collection period (male:female ratio is 13.58:1)

```{r}
preprocessed_data %>% 
  filter(dilution_factors == dilution_fct) %>% 
  group_by(source, time_durr, gender) %>% 
  count()
```

### Quick visualization

Visualize the model for collection period/gender stratified smoothing

```{r}
#| code-fold: true
#| code-summary: "Helper function to visualize model with confidence interval"
visualize_pred <- function(data, mod, group_var, ci = 0.95, length_out = 100, cex = 20){
  
  if(!is.null(group_var)){
    newdata <- data %>% 
      select({{group_var}}) %>% 
      distinct() %>% 
      crossing(
        rounded_age = seq(min(data$rounded_age), max(data$rounded_age), length.out = length_out)
      )
  }else{
    newdata <- data.frame(
      rounded_age = seq(min(data$rounded_age), max(data$rounded_age), length.out = length_out)
    )
  }
  
  linkinv <- mod$family$linkinv
  p <- (1 - ci) / 2
  n <- mod$df.residual
  
  out <- predict(
    mod,
    newdata = newdata, se.fit = TRUE) %>% 
  as_tibble() %>% 
  select(fit, se.fit) %>% 
  mutate(
    rounded_age = newdata$rounded_age,
    
    lower = linkinv(fit + qt(p, n) * se.fit),
    upper = linkinv(fit + qt(1 - p, n) * se.fit),
    fit = linkinv(fit)
  )
  
  if(!is.null(group_var)){
    out <- out %>% 
      mutate(
        !! group_var := newdata[[group_var]]
      )
  }
  
  ggplot() +
    geom_smooth(
      aes(
        x = rounded_age, y = fit, 
        ymin = lower, ymax = upper,
        color = if(!is.null(group_var)) factor(.data[[group_var]]) else "cornflowerblue",
        fill = if(!is.null(group_var)) factor(.data[[group_var]]) else "cornflowerblue"
      ),
      data = out,
      stat = "identity"
    ) +
    geom_point(
      aes(
        x = rounded_age, y = seroprev, 
        size = cex*pos/max(tot), 
        color = if(!is.null(group_var)) factor(.data[[group_var]]) else "black",
        fill = if(!is.null(group_var)) factor(.data[[group_var]]) else "grey"
      ),
      shape = 1,
      data = data
    ) +
    guides(size = "none", fill="none") +
    labs(x = "Age (years)",
         y = "Seroprevalence",
         color = if(!is.null(group_var)) str_to_title(group_var) else "") 
}
```

::: panel-tabset
## Collection period

```{r  message = FALSE, warning=FALSE}
preprocessed_data %>% 
  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = "time_durr") %>%
  visualize_pred(mod = seroprev_mod_coll, group_var = "time_durr") +
  labs(
    color = "Collection period"
  )
```

## Gender

Imbalance in sample size causes larger CI interval for female

```{r  message = FALSE, warning=FALSE}
preprocessed_data %>% 
  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = "gender") %>% 
  visualize_pred(mod = seroprev_mod_gender, group_var = "gender")
```
:::

## HCDC samples - a closer look

```{r include=FALSE}
#| code-fold: true
#| code-summary: "Function to generate plot"
library(leaflet)
library(stringi)

# create a plot for gender distribution
plot_sample_dist <- function(data, district = "", age_col = "rounded_age"){
  data %>% 
    group_by(.data[[age_col]]) %>% 
    ggplot() +
      geom_bar(aes(
        x = .data[[age_col]],
        fill = gender
      )) +
      scale_fill_manual(
          values = c("male"="#75baeb", "female"="#eb7587"),
          aesthetics = "fill",
          na.value = "grey"
        ) +
      labs(
        title = district,
        x = "Age",
        y = "Count"
      )
}

# generate data.frame of gender - age distribution of samples for each district
generate_district_plots <- function(data){
  data %>% 
    mutate(
      district = stri_trans_general(district, id = "Latin-ASCII"),
      district = str_to_title(district)
    ) %>% 
    group_by(district) %>% 
    nest() %>% 
    mutate(
      age_gender_plot = map(data, ~ plot_sample_dist(.x, district = district))
    ) %>% 
    ungroup()
}
```

### Seroprevalence - FOI by age

```{r warning=FALSE}
#| code-fold: true
#| code-summary: "Age-stratified seroprevalence across HCDC samples"
library(serosv)

# use rounded age
preprocessed_data %>% 
  filter(
    source == "hcdc", 
    rounded_age <= 15,
    dilution_factors == dilution_fct,
    !is.na(serostatus)
  ) %>% 
  select(rounded_age, serostatus) %>% 
  mutate(
    status = if_else(serostatus == "positive", 1, 0)
  ) %>%
  rename(
    age = rounded_age
  ) %>% 
  penalized_spline_model(s = "tp", framework = "pl") %>% 
  plot()
```

### Sample distribution by district

```{r}
preprocessed_data %>% 
  filter(source == "hcdc") %>% 
  generate_district_plots() %>% 
  pull(age_gender_plot)
```
