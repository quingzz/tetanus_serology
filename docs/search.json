[
  {
    "objectID": "ida.html",
    "href": "ida.html",
    "title": "Tetanus sero data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(gt)\nlibrary(mgcv)\n\nall_tetanus <- readRDS(\"data/preprocessed/all_samples.rds\")\n\nThere is currently no specific threshold to classify tetanus serostatus, for this analysis, a conservative threshold of 0.1IU/ml is used.\n\n# threshold to be considered positive\npositive_threshold <- 0.1\n\n\n\n\nLabel whether it is oucru or hcdc sample\nLabel the collection period for samples from each source\nCompute rounded age\nCompute concentration\n\nUse median value to compute where available, use lower or upper otherwise\nConcentration is computed by titer*dilution_fct where titer is the predicted “concentration” from the standard curve.\n\nLabel whether the sample is considered positive using 0.1IU/ml threshold\n\nIf concentration is not available –> the OD is either too high or too low, in which case seropositivity is determined by which extreme it is closer to (i.e., if OD closer to 0, label as negative and label as positive when OD is closer to 4)\n\n\nAlso filter samples from HCMC only\n\n\nCode for preprocessing data\npreprocessed_data <- all_tetanus %>% \n  mutate(\n    log_concentration = case_when(\n      !is.na(median) ~ median,\n      !is.na(upper) ~ upper,\n      !is.na(lower) ~ lower,\n      .default = NA\n    ),\n    concentration = (10^log_concentration)*dilution_factors,\n    serostatus = if_else(\n      !is.na(concentration),\n      # if concentration available, determine positivity using threshold\n      if_else(concentration >= 0.1, \"positive\", \"negative\"),\n      # if concentration not available, determine positivity using OD\n      # if result closer to OD upper bound, it is positive\n      if_else((4 - result) < (result - 0), \"positive\", \"negative\")\n    ),\n    source = if_else(str_detect(sample_id, \"^U\"), \"hcdc\", \"oucru\"),\n    age = case_when(\n      !is.na(dob) ~ as.double(difftime(date_collection, dob, unit = \"days\"))/365.25,\n      !is.na(exact_age) ~ exact_age, \n      !is.na(age_min) ~ age_min,\n      !is.na(age_max) ~ age_max,\n      .default = NA\n    ),\n    rounded_age = round(age)\n  ) %>% \n  filter(\n    province %in% c(\"HCMC\", \"Hồ Chí Minh\", \"HỒ CHÍ MINH\")\n  ) %>% group_by(source) %>% \n  mutate(\n    time_durr = paste0(\n      format(min(date_collection), \"%Y/%m\"), \n      \" - \", \n      format(max(date_collection), \"%Y/%m\"))\n  ) %>% \n  ungroup() \n\n\n\n\n\nVisualize distribution of concentration at different dilution levels and the positive threshold\n\n\nPlot distribution of log concentration at different dilutions\npreprocessed_data %>% \n  ggplot() +\n    geom_density(\n      aes(\n        x = concentration,\n        color = time_durr\n      )\n    ) +\n    geom_vline(\n      aes(\n        xintercept = positive_threshold\n      ),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_x_log10() +\n    facet_wrap(~ dilution_factors) +\n    labs(\n      color = \"Collection period\"\n    )\n\n\n\n\n\n\n# which dilution factor for the following analyses\ndilution_fct <- 200\n\n\n\n\n\nDensity plotBoxplotRegression plot\n\n\nDistribution of concentration for each age group\n\n\nPlot distribution of concentration stratified by age\npreprocessed_data %>% \n  filter(\n    rounded_age <= 15,\n    dilution_factors == dilution_fct\n    ) %>% \n  ggplot() +\n    geom_density(\n      aes(\n        x = concentration,\n        color = time_durr\n      )\n    ) +\n    geom_vline(\n      aes(xintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_x_log10()+\n    facet_wrap(~ rounded_age, scales = \"free_y\") + \n    labs(\n      color = \"Collection period\"\n    )\n\n\n\n\n\n\n\nBox plot of concentration per age group\n\n\nCode for box plot of concentration\npreprocessed_data %>% \n  filter(\n    rounded_age <= 15,\n    dilution_factors == dilution_fct\n    ) %>% \n  ggplot() +\n    geom_jitter(\n        aes(\n          x = source,\n          y = concentration,\n          color = time_durr\n        ),\n        alpha = 0.2\n      ) +\n    geom_boxplot(\n      aes(\n        x = source,\n        y = concentration,\n        color = time_durr\n      ),\n      fill = NA\n    ) +\n    geom_hline(\n      aes(yintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_y_log10()+\n    facet_wrap(~ rounded_age, scales = \"free_y\")+\n    labs(\n        color = \"Collection period\"\n      )\n\n\n\n\n\n\n\n\n\nCode for plotting concentration over age\npreprocessed_data %>% \n  filter(\n    rounded_age <= 15,\n    dilution_factors == dilution_fct\n    ) %>% \n  ggplot() +\n    geom_point(\n          aes(\n            x = age,\n            y = concentration,\n            color = time_durr\n          ),\n          alpha = 0.2\n        ) +\n    geom_smooth(\n        aes(\n          x = age,\n          y = concentration,\n          color = time_durr,\n          fill = time_durr\n        ),\n        method = \"loess\"\n      ) +\n    geom_hline(\n      aes(yintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_y_log10() +\n    labs(\n        color = \"Collection period\"\n      ) + \n    guides(fill = \"none\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nNote:\n\nThere are no samples for age groups 3 - 5 and 12 - 15 during the 2012-2016 collection period\n\nThe following table summarizes number of samples for each rounded age from each collection period\n\n\nCheck sample size for each age-group\npreprocessed_data %>% \n  filter(\n    rounded_age <= 15,\n    dilution_factors == dilution_fct\n    ) %>% \n  group_by(time_durr, rounded_age) %>% \n  count() %>% \n  pivot_wider(\n    names_from = time_durr,\n    values_from = n\n  ) %>% \n  arrange(rounded_age)\n\n\n# A tibble: 16 × 3\n# Groups:   rounded_age [16]\n   rounded_age `2012/01 - 2016/06` `2023/03 - 2023/12`\n         <dbl>               <int>               <int>\n 1           0                  36                  10\n 2           1                  25                  39\n 3           2                  NA                  28\n 4           3                  NA                  54\n 5           4                  NA                  63\n 6           5                  NA                  46\n 7           6                  11                  41\n 8           7                  39                  37\n 9           8                  35                  42\n10           9                  34                  30\n11          10                  35                  31\n12          11                  11                  25\n13          12                  NA                  22\n14          13                  NA                   6\n15          14                  NA                   6\n16          15                  NA                   1\n\n\n\n\n\nSeparate the data into 2 age groups: <3 and 7-12 for comparison\n\n\nCompute age group for stratification\ndata_by_agegrp <- preprocessed_data %>%\n  mutate(\n    age_group = case_when(\n      age < 3 ~ \"< 3\",\n      age >= 7 & age <= 12 ~ \"7-12\",\n      .default = NA\n    )\n  ) %>% \n  filter(\n    !is.na(age_group),\n    dilution_factors == dilution_fct\n  ) \n\n\nPerform two samples Wilcoxon test to compare distribution of concentration (on log scale) of 2 age groups (<3, 7-12) between samples from 2 collection periods\n\n\nPerform wilcoxon test to compare log concentration for 2 age groups\nconcentration_by_agegrp <- data_by_agegrp %>% \n  filter(!is.na(concentration)) %>% \n  group_by(\n    age_group\n  ) %>% \n  nest() %>% # divide the data.frame by each age group\n  mutate(\n    # perform t.test to compare samples from each source\n    # t_test = map(data, \n    #   ~ t.test(\n    #     log_concentration ~ source, data = .x\n    #   )\n    # ),\n    # p_value = map_dbl(t_test, ~.x$p.value),\n    # perform two-sample wilcoxon test instead to compare samples from each source\n    wilcox = map(data, \n      ~ t.test(\n        log_concentration ~ time_durr, data = .x\n      )\n    ),\n    p_value = map_dbl(wilcox, ~.x$p.value),\n    # compute summary for samples from each source (HCDC and OUCRU)\n    dat_summary = map(data, \\(dat){\n      dat %>% \n        group_by(time_durr) %>% \n        summarize(\n          median_concentration = median(concentration),\n          lwr = quantile(concentration, probs = 0.25),\n          upper = quantile(concentration, probs = 0.75)\n        ) %>% \n        mutate(\n          label = sprintf(\"%.4f (%.4f–%.4f)\",\n          median_concentration,\n          lwr,\n          upper),\n          .keep = \"unused\"\n        )\n    }\n    )\n  ) %>% \n  unnest(\n    dat_summary\n  ) %>% \n  pivot_wider(\n    names_from = time_durr,\n    values_from = label\n  )\n\n\n\n\nGenerate the comparison table\nconcentration_by_agegrp %>%\n  select(-wilcox, -data) %>% \n  relocate(p_value, .after = last_col()) %>% \n  ungroup() %>% \n  gt(rowname_col = \"age_group\") %>%\n  tab_header(title = \"Log(concentration) by collection period and age group\") %>% \n  tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_stub()\n    )\n  )\n\n\n\n\n\n\n  \n    \n      Log(concentration) by collection period and age group\n    \n    \n    \n      \n      2012/01 - 2016/06\n      2023/03 - 2023/12\n      p_value\n    \n  \n  \n    < 3\n0.6785 (0.2746–1.6855)\n0.9333 (0.3935–2.8357)\n0.3767952\n    7-12\n0.3187 (0.1287–1.0571)\n0.4078 (0.1331–1.7665)\n0.2340958\n  \n  \n  \n\n\n\n\nNote:\n\nThe result suggests that for both age groups, there is no statistically significant difference in the log(concentration) of samples between the 2 collection periods.\n\nThe following plots demonstrate the distribution of log(concentration)\n\nDensity plotBox plot\n\n\n\n\nGenerate the density plot\nconcentration_by_agegrp %>%\n  unnest(data) %>% \n  ggplot() +\n    geom_density(\n      aes(\n        x = concentration,\n        color = time_durr\n      )\n    ) +\n    geom_vline(\n      aes(xintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_x_log10() +\n    facet_wrap(~ age_group, scales = \"free_y\") +\n    labs(\n        color = \"Collection period\"\n      ) \n\n\n\n\n\n\n\n\n\nGenerate the box plot\nconcentration_by_agegrp %>%\n  unnest(data) %>% \n  ggplot() +\n    geom_jitter(\n        aes(\n          x = time_durr,\n          y = concentration,\n          color = time_durr\n        ),\n        alpha = 0.2\n      ) +\n    geom_boxplot(\n      aes(\n        x = time_durr,\n        y = concentration,\n        color = time_durr\n      ),\n      fill = NA\n    ) +\n    geom_hline(\n      aes(yintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_y_log10() +\n    labs(\n        color = \"Collection period\"\n      ) +\n    facet_wrap(~ age_group, scales = \"free_y\")"
  },
  {
    "objectID": "ida.html#concentration",
    "href": "ida.html#concentration",
    "title": "IDA for tetanus data",
    "section": "Concentration",
    "text": "Concentration\n\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(mgcv)\n\nall_tetanus <- readRDS(\"data/preprocessed/all_samples.rds\")\n\nThere is currently no specific threshold to classify tetanus serostatus, for this analysis, a conservative threshold of 0.1IU/ml is used.\n\n# threshold to be considered positive\npositive_threshold <- 0.1\n\n\nPreprocess data\n\nLabel whether it is oucru or hcdc sample\nCompute rounded age\nCompute titer\n\nUse median value to compute where available, use lower or upper otherwise\n\nLabel whether the sample is considered positive using 0.1IU/ml threshold\n\nAlso filter samples from HCMC only\n\n\nCode for preprocessing data\npreprocessed_data <- all_tetanus %>% \n  mutate(\n    log_titer = case_when(\n      !is.na(median) ~ median,\n      !is.na(upper) ~ upper,\n      !is.na(lower) ~ lower,\n      .default = NA\n    ),\n    titer = (10^log_titer)*dilution_factors,\n    serostatus = if_else(titer>0.1, \"positive\", \"negative\"),\n    source = if_else(str_detect(sample_id, \"^U\"), \"hcdc\", \"oucru\"),\n    age = case_when(\n      !is.na(dob) ~ as.double(difftime(date_collection, dob, unit = \"days\"))/365.25,\n      !is.na(exact_age) ~ exact_age, \n      !is.na(age_min) ~ age_min,\n      !is.na(age_max) ~ age_max,\n      .default = NA\n    ),\n    rounded_age = round(age)\n  ) %>% \n  filter(\n    province %in% c(\"HCMC\", \"Hồ Chí Minh\", \"HỒ CHÍ MINH\")\n  )\n\n\n\n\nDifferent dilutions\nVisualize distribution of titer at different dilution levels and the positive threshold\n\n\nPlot distribution of log titer at different dilutions\npreprocessed_data %>% \n  ggplot() +\n    geom_density(\n      aes(\n        x = titer,\n        color = source\n      )\n    ) +\n    geom_vline(\n      aes(\n        xintercept = positive_threshold\n      ),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_x_log10() +\n    facet_wrap(~ dilution_factors)\n\n\n\n\n\n\n# which dilution factor for the following analyses\ndilution_fct <- 200\n\n\n\nOUCRU vs HCDC titer\n\nDensity plotBoxplot\n\n\nDistribution of titer for each age group\n\n\nPlot distribution of titer stratified by age\npreprocessed_data %>% \n  filter(\n    rounded_age <= 15,\n    dilution_factors == dilution_fct\n    ) %>% \n  ggplot() +\n    geom_density(\n      aes(\n        x = titer,\n        color = source\n      )\n    ) +\n    geom_vline(\n      aes(xintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_x_log10()+\n    facet_wrap(~ rounded_age, scales = \"free_y\")\n\n\n\n\n\n\n\nBox plot of titer per age group\n\n\nCode for box plot of titer\npreprocessed_data %>% \n  filter(\n    rounded_age <= 15,\n    dilution_factors == dilution_fct\n    ) %>% \n  ggplot() +\n    geom_jitter(\n        aes(\n          x = source,\n          y = titer,\n          color = source\n        ),\n        alpha = 0.2\n      ) +\n    geom_boxplot(\n      aes(\n        x = source,\n        y = titer,\n        color = source\n      ),\n      fill = NA\n    ) +\n    geom_hline(\n      aes(yintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_y_log10()+\n    facet_wrap(~ rounded_age, scales = \"free_y\")\n\n\n\n\n\n\n\n\nNote:\n\nThere is no samples from OUCRU for age groups 2 - 5 and 12 - 15\n\nThe following table summarizes number of samples for each rounded age from each source\n\n\nCheck sample size for each age-group\npreprocessed_data %>% \n  filter(\n    rounded_age <= 15,\n    dilution_factors == dilution_fct\n    ) %>% \n  group_by(source, rounded_age) %>% \n  count() %>% \n  pivot_wider(\n    names_from = source,\n    values_from = n\n  )\n\n\n# A tibble: 16 × 3\n# Groups:   rounded_age [16]\n   rounded_age  hcdc oucru\n         <dbl> <int> <int>\n 1           0    10    36\n 2           1    39    25\n 3           2    28    NA\n 4           3    54    NA\n 5           4    63    NA\n 6           5    46    NA\n 7           6    41    11\n 8           7    37    39\n 9           8    42    35\n10           9    30    34\n11          10    31    35\n12          11    25    11\n13          12    22    NA\n14          13     6    NA\n15          14     6    NA\n16          15     1    NA\n\n\n\n\nStratified by age group\nSeparate the data into 2 age groups: <4 and 6-11 for comparison\n\n\nCompute age group for stratification\ndata_by_agegrp <- preprocessed_data %>%\n  mutate(\n    age_group = case_when(\n      age < 4 ~ \"< 4\",\n      age >= 6 & age <= 11 ~ \"6-11\"\n    ),\n    .default = NA\n  ) %>% \n  filter(\n    !is.na(serostatus),\n    !is.na(age_group),\n    dilution_factors == dilution_fct\n  ) \n\n\nPerform t-test to compare distribution of log(titer) of 2 age groups (<4, 6-11) between OUCRU and HCDC samples\n\n\nPerform t-test to compare log titer for 2 age groups\nconcentration_by_agegrp <- data_by_agegrp %>% \n  group_by(\n    age_group\n  ) %>% \n  nest() %>% # divide the data.frame by each age group\n  mutate(\n    # perform t.test to compare samples from each source\n    t_test = map(data, \n      ~ t.test(\n        log_titer ~ source, data = .x\n      )\n    ),\n    t_test_p = map_dbl(t_test, ~.x$p.value),\n    # compute summary for samples from each source (HCDC and OUCRU)\n    dat_summary = map(data, \\(dat){\n      dat %>% \n        group_by(source) %>% \n        summarize(\n          median_titer = median(titer),\n          lwr = quantile(titer, probs = 0.25),\n          upper = quantile(titer, probs = 0.75)\n        ) %>% \n        mutate(\n          label = sprintf(\"%.4f (%.4f–%.4f)\",\n          median_titer,\n          lwr,\n          upper),\n          .keep = \"unused\"\n        )\n    }\n    )\n  ) %>% \n  unnest(\n    dat_summary\n  ) %>% \n  pivot_wider(\n    names_from = source,\n    values_from = label\n  )\n\n\n\n\nGenerate the comparison table\nconcentration_by_agegrp %>%\n  select(age_group, oucru, hcdc, t_test_p) %>% \n  rename(\n    p_value = t_test_p\n  ) %>% \n  ungroup() %>% \n  gt(rowname_col = \"age_group\") %>%\n  tab_header(title = \"Log(titer) by sample source and age group\") %>% \n  tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_stub()\n    )\n  )\n\n\n\n\n\n\n  \n    \n      Log(titer) by sample source and age group\n    \n    \n    \n      \n      oucru\n      hcdc\n      p_value\n    \n  \n  \n    < 4\n0.6785 (0.2746–1.6855)\n1.0190 (0.3935–2.4593)\n0.41108950\n    6-11\n0.3003 (0.1272–1.0368)\n0.4920 (0.1667–2.0445)\n0.01841121\n  \n  \n  \n\n\n\n\nNote:\n\nThe result suggests that there is a statistically significant difference between log(titer) of OUCRU and HCDC samples for older age group (6-11), more specifically: log(titer) from HCDC samples is higher.\n\nThe following plots demonstrate the distribution of log(titer)\n\nDensity plotBox plot\n\n\n\n\nGenerate the density plot\nconcentration_by_agegrp %>%\n  unnest(data) %>% \n  ggplot() +\n    geom_density(\n      aes(\n        x = titer,\n        color = source\n      )\n    ) +\n    geom_vline(\n      aes(xintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_x_log10() +\n    facet_wrap(~ age_group, scales = \"free_y\")\n\n\n\n\n\n\n\n\n\nGenerate the box plot\nconcentration_by_agegrp %>%\n  unnest(data) %>% \n  ggplot() +\n    geom_jitter(\n        aes(\n          x = source,\n          y = titer,\n          color = source\n        ),\n        alpha = 0.2\n      ) +\n    geom_boxplot(\n      aes(\n        x = source,\n        y = titer,\n        color = source\n      ),\n      fill = NA\n    ) +\n    geom_hline(\n      aes(yintercept = positive_threshold),\n      color = \"green\",\n      linetype = \"dashed\"\n    ) +\n    scale_y_log10()+\n    facet_wrap(~ age_group, scales = \"free_y\")"
  },
  {
    "objectID": "ida.html#seroprevalence",
    "href": "ida.html#seroprevalence",
    "title": "Tetanus sero data",
    "section": "Seroprevalence",
    "text": "Seroprevalence\n\nComparison table\n\n\nCompute prevalence and confidence interval\nprevalence_by_agegrp <- data_by_agegrp %>% \n  group_by(\n    time_durr, age_group\n  ) %>% \n  summarize(\n    seropositive = sum(serostatus == \"positive\"),\n    sample_size = sum(!is.na(serostatus))\n  ) %>% \n  rowwise() %>% \n  mutate(\n    seroprevalence = seropositive/sample_size,\n    seroprevalence_ci = list(\n      prop.test(\n      x = seropositive, n = sample_size,\n      conf.level = 0.95)$conf.int\n    ),\n    seroprevalence_lwr = seroprevalence_ci[[1]],\n    seroprevalence_upper = seroprevalence_ci[[2]]\n  ) %>% \n  ungroup()\n\n\nSeroprevalence with confidence intervals\n\n\ngenerate the table\nprevalence_by_agegrp %>%\n  mutate(\n    label = sprintf(\"%.1f%% (%.1f–%.1f%%)\",\n        100 * seroprevalence,\n        100 * seroprevalence_lwr,\n        100 * seroprevalence_upper)\n  ) %>% \n  select(time_durr, age_group, label) %>%\n  pivot_wider(names_from = time_durr,\n              values_from = label) %>%\n  gt(rowname_col = \"age_group\") %>%\n  tab_header(title = \"Seroprevalence by collection period and age group\") %>% \n  tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_stub()\n    )\n  )\n\n\n\n\n\n\n  \n    \n      Seroprevalence by collection period and age group\n    \n    \n    \n      \n      2012/01 - 2016/06\n      2023/03 - 2023/12\n    \n  \n  \n    7-12\n85.8% (78.7–90.9%)\n83.4% (76.6–88.6%)\n    < 3\n93.4% (83.3–97.9%)\n94.0% (86.9–97.5%)\n  \n  \n  \n\n\n\n\nComparison tables with p-value. Only samples from the 2 age groups <3 and 7-12 are included.\n\nOverallBy age group\n\n\nChi-squared test\n\n\ngenerate the summary table\nlibrary(gtsummary)\n\ndata_by_agegrp %>% \n  select(serostatus, time_durr) %>% \n  tbl_summary(\n    by = time_durr,          \n    type = all_categorical() ~ \"categorical\",\n    missing = \"no\"\n  ) %>%\n  add_p(test = everything() ~ \"chisq.test\") %>%  \n  add_n() %>%                                    \n  bold_labels()\n\n\n\n\n\n\n  \n    \n      Characteristic\n      N\n      2012/01 - 2016/06\nN = 2021\n      2023/03 - 2023/12\nN = 2631\n      p-value2\n    \n  \n  \n    serostatus\n465\n\n\n>0.9\n        negative\n\n24 (12%)\n33 (13%)\n\n        positive\n\n178 (88%)\n230 (87%)\n\n  \n  \n  \n    \n      1 n (%)\n    \n    \n      2 Pearson’s Chi-squared test\n    \n  \n\n\n\n\n\n\n\n\nperform Fisher exact test\nprevalence_compare <- data_by_agegrp %>% \n  group_by(\n    age_group\n  ) %>% \n  nest() %>% # divide the data.frame by each age group\n  mutate(\n    # perform fisher.test to compare samples from each source\n    fisher_test = map(data, \n      \\(df){\n        tab <- table(df$serostatus, df$time_durr)\n        fisher.test(tab)\n      }\n    ),\n    fisher_test_p = map_dbl(fisher_test, ~.x$p.value),\n    odd_ratio = map_chr(fisher_test, \\(out){\n      sprintf(\"%.3f (%.3f–%.3f)\",\n        out$estimate,\n        out$conf.int[1],\n        out$conf.int[2])\n    }),\n    # compute summary for samples from each source (HCDC and OUCRU)\n    dat_summary = map(data, \\(dat){\n      dat %>% \n        group_by(time_durr) %>% \n        summarize(\n          label = paste0(sum(serostatus == \"positive\"), \"/\", n())\n        )\n    }\n    )\n  ) %>% \n  unnest(\n    dat_summary\n  ) %>% \n  ungroup() %>% \n  pivot_wider(\n    names_from = time_durr,\n    values_from = label\n  )\n\n\nCheck the negative-positive counts for each age group\n\nmap(prevalence_compare$data, \n  \\(df){\n    table(df$serostatus, df$time_durr)\n})\n\n[[1]]\n          \n           2012/01 - 2016/06 2023/03 - 2023/12\n  negative                 4                 6\n  positive                57                94\n\n[[2]]\n          \n           2012/01 - 2016/06 2023/03 - 2023/12\n  negative                20                27\n  positive               121               136\n\n\nComparison table with p-value from the Fisher exact test\n\n\ngenerate the table\nprevalence_compare %>%\n  select(-data, -fisher_test) %>%\n  relocate(odd_ratio, fisher_test_p, .after = last_col()) %>% \n  rename(\n    p_val = fisher_test_p,\n    `2023/03 - 2023/12 (pos/tot)` = `2023/03 - 2023/12`,\n    `2012/01 - 2016/06 (pos/tot)` = `2012/01 - 2016/06`,\n    `Odd ratio (95% CI)` = odd_ratio\n  ) %>% \n  gt(rowname_col = \"age_group\") %>%\n  tab_header(title = \"Compare prevalence by collection period and age group\") %>% \n  tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = list(\n      cells_column_labels(everything()),\n      cells_stub()\n    )\n  ) %>%\n  fmt_number(\n    columns = where(is.numeric),\n    decimals = 4\n  )\n\n\n\n\n\n\n  \n    \n      Compare prevalence by collection period and age group\n    \n    \n    \n      \n      2012/01 - 2016/06 (pos/tot)\n      2023/03 - 2023/12 (pos/tot)\n      Odd ratio (95% CI)\n      p_val\n    \n  \n  \n    < 3\n57/61\n94/100\n1.099 (0.218–4.862)\n1.0000\n    7-12\n121/141\n136/163\n0.833 (0.420–1.631)\n0.6344\n  \n  \n  \n\n\n\n\n\n\n\n\n\nAge stratified seroprevalence\n\n\nHelper function to compute age-stratified aggregated seroprev\ncompute_seroprev <- function(data, age_lim, dilution_fct, group_var){\n  if(!is.null(group_var)){\n    out <- data %>% \n      filter(age<=age_lim, dilution_factors == dilution_fct) %>% \n      mutate(\n        serostatus = if_else(serostatus == \"positive\", 1, 0),\n        !! group_var := factor(.data[[group_var]])\n      ) %>% \n      group_by(rounded_age, .data[[group_var]]) %>% \n      summarize(\n        pos = sum(serostatus, na.rm = TRUE),\n        tot = n(),\n        neg = tot - pos,\n        seroprev = sum(serostatus, na.rm = TRUE)/n()\n      ) %>% \n      ungroup()\n  }else{\n    out <- data %>% \n      filter(age<=age_lim, dilution_factors == dilution_fct) %>% \n      mutate(\n        serostatus = if_else(serostatus == \"positive\", 1, 0)\n      ) %>% \n      group_by(rounded_age) %>% \n      summarize(\n        pos = sum(serostatus, na.rm = TRUE),\n        tot = n(),\n        neg = tot - pos,\n        seroprev = sum(serostatus, na.rm = TRUE)/n()\n      ) %>% \n      ungroup()\n  }\n  \n  out\n}\n\n\nCheck whether there is a difference in seroprevalence between:\n\nsamples from the 2 collection periods\nfemale and male samples\n\n\nCollection periodGenderNo stratification\n\n\n\n\nModel stratified by collection period\n# ----- Model with smoothing stratified by collection period ------\nseroprev_mod_coll <- preprocessed_data %>% \n  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = \"time_durr\") %>% \n  gam(cbind(pos, neg) ~ s(rounded_age, bs = \"bs\", by = time_durr) + time_durr, data = ., family=binomial(link = \"logit\"))\nsummary(seroprev_mod_coll)\n\n\n\nFamily: binomial \nLink function: logit \n\nFormula:\ncbind(pos, neg) ~ s(rounded_age, bs = \"bs\", by = time_durr) + \n    time_durr\n\nParametric coefficients:\n                           Estimate Std. Error z value Pr(>|z|)    \n(Intercept)                  1.8778     0.2000   9.389   <2e-16 ***\ntime_durr2023/03 - 2023/12   0.1184     0.2581   0.459    0.646    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n                                            edf Ref.df Chi.sq  p-value    \ns(rounded_age):time_durr2012/01 - 2016/06 1.000  1.000  2.369 0.123779    \ns(rounded_age):time_durr2023/03 - 2023/12 2.854  3.555 19.386 0.000406 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.355   Deviance explained = 54.4%\nUBRE = 0.33797  Scale est. = 1         n = 24\n\n\n\n\n\n\nModel stratified by gender\n# ----- Model with smoothing stratified by gender ------\nseroprev_mod_gender <- preprocessed_data %>% \n  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = \"gender\") %>% \n  gam(cbind(pos, neg) ~ s(rounded_age, bs = \"bs\", by = gender) + gender, data = ., family=binomial(link = \"logit\"))\nsummary(seroprev_mod_gender)\n\n\n\nFamily: binomial \nLink function: logit \n\nFormula:\ncbind(pos, neg) ~ s(rounded_age, bs = \"bs\", by = gender) + gender\n\nParametric coefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   2.2626     0.2973   7.611 2.73e-14 ***\ngendermale   -0.3301     0.3328  -0.992    0.321    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n                              edf Ref.df Chi.sq  p-value    \ns(rounded_age):genderfemale 1.000  1.000  0.044    0.835    \ns(rounded_age):gendermale   2.809  3.503 24.448 4.35e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.439   Deviance explained = 54.3%\nUBRE = 0.19118  Scale est. = 1         n = 29\n\n\n\n\n\n\nModel without stratification for smoothing\n# ----- Baseline model (no stratification) ------\nseroprev_mod <- preprocessed_data %>% \n  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = NULL) %>%\n  gam(cbind(pos, neg) ~ s(rounded_age, bs = \"bs\"), data = ., family=binomial(link = \"logit\"))\nsummary(seroprev_mod)\n\n\n\nFamily: binomial \nLink function: logit \n\nFormula:\ncbind(pos, neg) ~ s(rounded_age, bs = \"bs\")\n\nParametric coefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   1.9015     0.1342   14.17   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n                 edf Ref.df Chi.sq  p-value    \ns(rounded_age) 1.669  2.087  18.36 0.000139 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.478   Deviance explained = 61.5%\nUBRE = 0.089952  Scale est. = 1         n = 16\n\n\n\n\n\nNote:\nThe result from model stratified by (sample) source suggests that:\n\nThere’s no statistically significant difference in seroprevalence between the samples from these 2 sampling period\n\nThe result from model stratified by gender suggests that:\n\nThere’s no statistically significant difference in seroprevalence between male and female samples\n\nHowever, it may be due to the fact that the sample size for the earlier collection period (using OUCRU samples) is quite small and we don’t have any data for several age groups (3-6, 11-14)\nAnother issue is that there is an imbalance in the number of male vs female samples during later collection period (male:female ratio is 13.58:1)\n\npreprocessed_data %>% \n  filter(dilution_factors == dilution_fct) %>% \n  group_by(source, time_durr, gender) %>% \n  count()\n\n# A tibble: 4 × 4\n# Groups:   source, time_durr, gender [4]\n  source time_durr         gender     n\n  <chr>  <chr>             <chr>  <int>\n1 hcdc   2023/03 - 2023/12 female    33\n2 hcdc   2023/03 - 2023/12 male     448\n3 oucru  2012/01 - 2016/06 female   241\n4 oucru  2012/01 - 2016/06 male     247\n\n\n\n\nQuick visualization\nVisualize the model for collection period/gender stratified smoothing\n\n\nHelper function to visualize model with confidence interval\nvisualize_pred <- function(data, mod, group_var, ci = 0.95, length_out = 100, cex = 20){\n  \n  if(!is.null(group_var)){\n    newdata <- data %>% \n      select({{group_var}}) %>% \n      distinct() %>% \n      crossing(\n        rounded_age = seq(min(data$rounded_age), max(data$rounded_age), length.out = length_out)\n      )\n  }else{\n    newdata <- data.frame(\n      rounded_age = seq(min(data$rounded_age), max(data$rounded_age), length.out = length_out)\n    )\n  }\n  \n  linkinv <- mod$family$linkinv\n  p <- (1 - ci) / 2\n  n <- mod$df.residual\n  \n  out <- predict(\n    mod,\n    newdata = newdata, se.fit = TRUE) %>% \n  as_tibble() %>% \n  select(fit, se.fit) %>% \n  mutate(\n    rounded_age = newdata$rounded_age,\n    \n    lower = linkinv(fit + qt(p, n) * se.fit),\n    upper = linkinv(fit + qt(1 - p, n) * se.fit),\n    fit = linkinv(fit)\n  )\n  \n  if(!is.null(group_var)){\n    out <- out %>% \n      mutate(\n        !! group_var := newdata[[group_var]]\n      )\n  }\n  \n  ggplot() +\n    geom_smooth(\n      aes(\n        x = rounded_age, y = fit, \n        ymin = lower, ymax = upper,\n        color = if(!is.null(group_var)) factor(.data[[group_var]]) else \"cornflowerblue\",\n        fill = if(!is.null(group_var)) factor(.data[[group_var]]) else \"cornflowerblue\"\n      ),\n      data = out,\n      stat = \"identity\"\n    ) +\n    geom_point(\n      aes(\n        x = rounded_age, y = seroprev, \n        size = cex*pos/max(tot), \n        color = if(!is.null(group_var)) factor(.data[[group_var]]) else \"black\",\n        fill = if(!is.null(group_var)) factor(.data[[group_var]]) else \"grey\"\n      ),\n      shape = 1,\n      data = data\n    ) +\n    guides(size = \"none\", fill=\"none\") +\n    labs(x = \"Age (years)\",\n         y = \"Seroprevalence\",\n         color = if(!is.null(group_var)) str_to_title(group_var) else \"\") \n}\n\n\n\nCollection periodGender\n\n\n\npreprocessed_data %>% \n  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = \"time_durr\") %>%\n  visualize_pred(mod = seroprev_mod_coll, group_var = \"time_durr\") +\n  labs(\n    color = \"Collection period\"\n  )\n\n\n\n\n\n\nImbalance in sample size causes larger CI interval for female\n\npreprocessed_data %>% \n  compute_seroprev(age_lim = 15, dilution_fct = dilution_fct, group_var = \"gender\") %>% \n  visualize_pred(mod = seroprev_mod_gender, group_var = \"gender\")"
  },
  {
    "objectID": "ida.html#hcdc-samples---a-closer-look",
    "href": "ida.html#hcdc-samples---a-closer-look",
    "title": "Tetanus sero data",
    "section": "HCDC samples - a closer look",
    "text": "HCDC samples - a closer look\n\nSeroprevalence - FOI by age\n\n\nAge-stratified seroprevalence across HCDC samples\nlibrary(serosv)\n\n# use rounded age\npreprocessed_data %>% \n  filter(\n    source == \"hcdc\", \n    rounded_age <= 15,\n    dilution_factors == dilution_fct,\n    !is.na(serostatus)\n  ) %>% \n  select(rounded_age, serostatus) %>% \n  mutate(\n    status = if_else(serostatus == \"positive\", 1, 0)\n  ) %>%\n  rename(\n    age = rounded_age\n  ) %>% \n  penalized_spline_model(s = \"tp\", framework = \"pl\") %>% \n  plot()\n\n\n\n\n\n\n\nSample distribution by district\n\npreprocessed_data %>% \n  filter(source == \"hcdc\") %>% \n  generate_district_plots() %>% \n  pull(age_gender_plot)\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n[[4]]"
  },
  {
    "objectID": "samples_processing.html",
    "href": "samples_processing.html",
    "title": "Preprocess ELISA data",
    "section": "",
    "text": "# load serodt\ndevtools::load_all(\"../serodt/\")\n\nℹ Loading serodt\nLoading required package: sf\n\n\nWarning: package 'sf' was built under R version 4.3.3\n\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\nLoading required package: tidyverse\n\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'tidyr' was built under R version 4.3.1\n\n\nWarning: package 'readr' was built under R version 4.3.1\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.1\n\n\nWarning: package 'stringr' was built under R version 4.3.1\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nLoading required package: leaflet\n\n\nWarning: package 'leaflet' was built under R version 4.3.1\n\n\nLoading required package: leafpop\nLoading required package: shiny\n\n\nWarning: package 'shiny' was built under R version 4.3.3\n\n\nLoading required package: plotly\n\n\nWarning: package 'plotly' was built under R version 4.3.1\n\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nLoading required package: DT\n\n\nWarning: package 'DT' was built under R version 4.3.1\n\n\n\nAttaching package: 'DT'\n\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n\nLoading required package: ddpcr\n\nAttaching package: 'ddpcr'\n\nThe following object is masked from 'package:stats':\n\n    step\n\nLoading required package: patchwork\n\n\nWarning: package 'patchwork' was built under R version 4.3.3\n\n\nLoading required package: writexl\n\n\nWarning: package 'writexl' was built under R version 4.3.3\n\n\nWarning: replacing previous import 'ggplot2::last_plot' by 'plotly::last_plot'\nwhen loading 'serodt'\n\n\nWarning: replacing previous import 'DT::dataTableOutput' by\n'shiny::dataTableOutput' when loading 'serodt'\n\n\nWarning: replacing previous import 'DT::renderDataTable' by\n'shiny::renderDataTable' when loading 'serodt'\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(mvtnorm)\n\nWarning: package 'mvtnorm' was built under R version 4.3.3\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.3.3\n\n\n\nAttaching package: 'janitor'\n\nThe following object is masked from 'package:serodt':\n\n    remove_empty_cols\n\nThe following object is masked from 'package:ddpcr':\n\n    remove_empty\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test"
  },
  {
    "objectID": "samples_processing.html#methodology",
    "href": "samples_processing.html#methodology",
    "title": "Preprocess ELISA data",
    "section": "Methodology",
    "text": "Methodology\n\nStandard curves\nA 4-parameter logistic model that relates OD (Optical Density) and LC (Log concentration)\n\\[\nOD = d + \\frac{a - d}{1 + 10^{(LC - c)b}}\n\\]\nWhere:\n\n\\(a\\) is the minimum \\(OD\\) (when the concentration is 0)\n\\(d\\) is the maximum \\(OD\\) (when the concentration is \\(+\\infty\\))\n\\(c\\) is the \\(LC\\) of the point of inflexion (where \\(OD = (d - a)/2\\))\n\\(b\\) is the slope at the inflexion point\n\nAll the functions used for fitting data to the standard curve and converting LC to OD is in the elisa_funcs.R file\nThe code for analysis is heavily based on the one from this Github page: https://choisy.github.io/tetanus/analysis.html\n\nsource(\"R/elisa_funcs.R\")"
  },
  {
    "objectID": "samples_processing.html#oucru-samples",
    "href": "samples_processing.html#oucru-samples",
    "title": "Preprocess ELISA data",
    "section": "OUCRU samples",
    "text": "OUCRU samples\n\nPreparing data\nLoad tetanus test results for OUCRU samples\n\ndata_path <- \"./data/raw/oucru/\"\noucru_samples <- lapply(\n  list.files(data_path, full.names = TRUE), \n  \\(file){\n    read_csv(file) %>% \n      clean_names()\n    }\n  )\n\nStandardize data for analysis\n\noucru_samples <- bind_rows(oucru_samples) %>% \n  mutate(\n    sample_id = case_when(\n      !is.na(hc_sample_id) ~ hc_sample_id,\n      !is.na(hu_sample_id) ~ hu_sample_id,\n      !is.na(qn_sample_id) ~ qn_sample_id,\n      .default = NA\n    )\n  ) %>% \n  select(-hc_sample_id, -hu_sample_id, -qn_sample_id) %>% \n  standardize_data(\n    id_col = \"sample_id\",\n    result_col = \"result\",\n    dilution_fct_col = \"dilution_factors\",\n    antitoxin_label = \"Anti_toxin\"\n  )\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(id_col)\n\n  # Now:\n  data %>% select(all_of(id_col))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(result_col)\n\n  # Now:\n  data %>% select(all_of(result_col))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(dilution_fct_col)\n\n  # Now:\n  data %>% select(all_of(dilution_fct_col))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\n\n\n\nStandard curves\n\noucru_plates <- oucru_samples %>% \n    mutate(plate_id = paste0(\"oucru_plate_\", plate_id)) %>% \n    split(.$plate_id)\n\n# For each data from each plate, do the following\n# 1: retrieve the anti-toxins data from all plates\noucru_antitoxins <- map(oucru_plates, get_antitoxins)\n# 2: generate the standard curve with CI in the form of a dataframe\noucru_standard_curve_df <- map(oucru_antitoxins, standard_curve_data, nls4PL)\n# 3: convert the standard curve dataframe into a standard curve function\noucru_standard_curves <- map(oucru_standard_curve_df, data2function)\n# 4: convert the OD of the samples into log-concentrations\noucru_processed_samples <- map2(oucru_plates, oucru_standard_curves, process_samples)\n\nTry plotting standard curves\n\nplot_standard_curve(\n  bind_rows(oucru_standard_curve_df, .id = \"plate_label\"), \n  data = bind_rows(oucru_antitoxins, .id = \"plate_label\"),\n  datapoint_size = 1\n  ) +\n  facet_wrap(~ plate_label)\n\n\n\n\nsave necessary data\n\n# saveRDS(oucru_standard_curve_df, \"./data/preprocessed/oucru_standard_curves_df.rds\")\n# saveRDS(oucru_antitoxins, \"./data/preprocessed/oucru_anti_toxins.rds\")\n# saveRDS(oucru_samples, \"./data/preprocessed/oucru_samples_by_plate.rds\")\n\n\n\nQuality control\nFor each plate:\n\nGet negative controls’ OD at different dilution levels\nConvert to concentration\nCheck which dilution gives positive result (i.e. wrong result)\n\n\nnegative_controls <- map(oucru_plates, get_negative_controls) \nnegative_controls_conc <- map2(negative_controls, oucru_standard_curves, label_positive) \n\noucru_failed_dilutions <- negative_controls_conc %>% \n  bind_rows(.id = \"plate_label\") %>% \n  filter(positive)\n\n\n\nProcess sample data\nSelect necessary columns\n\noucru_processed_samples <- oucru_processed_samples %>% \n  bind_rows() %>% \n  mutate(\n    test_date = as.Date(paste(year, month, day, sep = \"-\"))\n  ) %>% \n  select(\n    sample_id, test_date, dilution_factors, result, lower, median, upper\n  )\n\nGet sample details from serodt\n\noucru_samples_details <- serodt::samples %>%\n  include_hospital() %>% \n  select(\n    hospital, sample_id, gender, exact_age, age_min, age_max, date_collection, province\n  )\n\noucru_tetanus <- oucru_samples_details %>% \n  right_join(oucru_processed_samples, \n             by = join_by(sample_id == sample_id))"
  },
  {
    "objectID": "samples_processing.html#hcdc-samples",
    "href": "samples_processing.html#hcdc-samples",
    "title": "Preprocess ELISA data",
    "section": "HCDC samples",
    "text": "HCDC samples\n\ndatafile <- \"./data/raw/hcdc/Tetanus_Dr. Thinh_HCDC samples.xlsx\"\n\n\nPreparing data\n\n\nData preprocessing functions\nremove_empty_plates <- function(x) x[map_lgl(x, ~ ! all(is.na(.x$RESULT)))]\n\nadd_sample_id <- function(x) {\n  id <- x$HCDC_SAMPLE_ID\n  \n  x$HCDC_SAMPLE_ID <- grep(\"Anti\", id, value = TRUE, invert = TRUE) %>% \n    na.exclude() %>% \n    unique() %>% \n    # repeat 3 times for 3 dilution levels\n    rep(each = 3) %>% \n    c(grep(\"Anti\", id, value = TRUE))\n  \n  x\n}\n\n\nLoad tetanus samples\n\nplates <- datafile  %>% \n  excel_sheets() %>% \n  (\\(.x) .x[grepl(\"Plate\", .x)])() %>% \n  (\\(.x) setNames(map(.x, read_excel, path = datafile), .x))() %>% \n  map(~ setNames(.x, toupper(names(.x)))) %>% \n  remove_empty_plates() %>% \n  map(add_sample_id)\n\n\n\nStandard curves\nFor each plate, fit the standard curve and estimate the OD\n\n# standardize data before performing the steps\nstandardized_plates <- map(plates, \\(.){\n  standardize_data(\n    .,\n    id_col = \"HCDC_SAMPLE_ID\",\n    result_col = \"RESULT\",\n    dilution_fct_col = \"DILUTION_FACTORS\",\n    antitoxin_label = \"Anti_toxin\"\n  )\n})\n# step 1: retrieve the anti-toxins data from all plates\nanti_toxins <- map(standardized_plates, get_antitoxins)\n# step 2: generate the standard curve with CI in the form of a dataframe\nstandard_curve_df <- map(anti_toxins, standard_curve_data, nls4PL)\n# step 3: convert the standard curve dataframe into a standard curve function\nstandard_curves <- map(standard_curve_df, data2function)\n# step 4: convert the OD of the samples into log-concentrations\nsamples <- map2(standardized_plates, standard_curves, process_samples)\n\nPlot standard curves for all the plates\n\nplot_standard_curve(\n  bind_rows(standard_curve_df, .id = \"plate_label\"), \n  data = bind_rows(anti_toxins, .id = \"plate_label\"),\n  datapoint_size = 1\n  ) +\n  facet_wrap(~ plate_label)\n\n\n\n\nSave necessary data\n\n# saveRDS(standard_curve_df, \"./data/preprocessed/hcdc_standard_curves_df.rds\")\n# saveRDS(anti_toxins, \"./data/preprocessed/hcdc_anti_toxins.rds\")\n# saveRDS(samples, \"./data/preprocessed/hcdc_samples_by_plate.rds\")\n\n\n\nQuality control\n\nhcdc_negative_controls <- map(standardized_plates, get_negative_controls) \nhcdc_negative_controls_conc <- map2(hcdc_negative_controls, standard_curves, label_positive) \n\nhcdc_failed_dilutions <- negative_controls_conc %>% \n  bind_rows(.id = \"plate_label\") %>% \n  filter(positive)\n\nhcdc_failed_dilutions\n\n# A tibble: 0 × 7\n# ℹ 7 variables: plate_label <chr>, dilution <int>, od <dbl>, lower <dbl>,\n#   median <dbl>, upper <dbl>, positive <lgl>\n\n\n\n\nProcess sample data\n\nhcdc_samples <- samples %>% \n  bind_rows(, .id = \"plate_label\") %>% \n  clean_names() %>% \n  mutate(\n    test_date = as.Date(paste(year, month, day, sep = \"-\"))\n  ) %>% \n  select(\n    sample_id, test_date, dilution_factors, result, lower, median, upper\n  )\n\nGet samples details\n\nsample_details <- read_excel(\n  datafile,\n  sheet = \"Sheet1\",\n  skip = 5\n)\n\nWarning: Expecting numeric in AB51 / R51C28: got a date\n\n\nNew names:\n• `` -> `...16`\n• `` -> `...17`\n• `` -> `...18`\n• `` -> `...19`\n• `` -> `...20`\n• `` -> `...21`\n• `` -> `...22`\n• `` -> `...23`\n• `` -> `...24`\n• `` -> `...25`\n• `` -> `...26`\n• `` -> `...27`\n• `` -> `...28`\n• `` -> `...29`\n• `` -> `...30`\n\nsample_details <- sample_details %>% \n  clean_names() %>% \n  select(\n    benh_vien, ma_so, ngay_thang_nam_sinh, gioi_tinh, quan_huyen, tinh_tp,\n    ngay_lay_mau, the_tich_ml\n  ) %>% \n  rename(\n    hospital = benh_vien, sample_id = ma_so,\n    dob = ngay_thang_nam_sinh, gender = gioi_tinh, district = quan_huyen,\n    province = tinh_tp, date_collection = ngay_lay_mau, vol_ml = the_tich_ml\n  )\n\nCreate tetanus dataset for HCDC\n\nhcdc_tetanus <- sample_details %>% \n  right_join(\n    hcdc_samples,\n    by = join_by(sample_id == sample_id)\n  ) %>% \n  mutate(\n    gender = fct_recode(\n      gender, \"male\" = \"Nam\", \"female\" = \"Nữ\"\n    )\n  )"
  },
  {
    "objectID": "samples_processing.html#combine-samples",
    "href": "samples_processing.html#combine-samples",
    "title": "Preprocess ELISA data",
    "section": "Combine samples",
    "text": "Combine samples\n\ntetanus_samples <- bind_rows(\n  oucru_tetanus,\n  hcdc_tetanus\n) %>% \n  mutate(\n    province = if_else(\n      province %in% c(\"HCMC\", \"Hồ Chí Minh\", \"HỒ CHÍ MINH\"),\n      \"HCMC\",\n      province\n    )\n  )\n\nPreprocess the age data\n\nsaveRDS(tetanus_samples, \"data/preprocessed/all_samples.rds\")"
  }
]