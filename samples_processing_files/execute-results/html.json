{
  "hash": "c1323d24b8a0dd5cfba38bf0c8f3d88a",
  "result": {
    "markdown": "---\ntitle: \"Preprocess ELISA data\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# load serodt\ndevtools::load_all(\"../serodt/\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Loading serodt\nLoading required package: sf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sf' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\nLoading required package: tidyverse\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'lubridate' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nLoading required package: leaflet\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'leaflet' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: leafpop\nLoading required package: shiny\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'shiny' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: plotly\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'plotly' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nLoading required package: DT\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'DT' was built under R version 4.3.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'DT'\n\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n\nLoading required package: ddpcr\n\nAttaching package: 'ddpcr'\n\nThe following object is masked from 'package:stats':\n\n    step\n\nLoading required package: patchwork\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'patchwork' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: writexl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'writexl' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: replacing previous import 'ggplot2::last_plot' by 'plotly::last_plot'\nwhen loading 'serodt'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: replacing previous import 'DT::dataTableOutput' by\n'shiny::dataTableOutput' when loading 'serodt'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: replacing previous import 'DT::renderDataTable' by\n'shiny::renderDataTable' when loading 'serodt'\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(mvtnorm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'mvtnorm' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'janitor' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'janitor'\n\nThe following object is masked from 'package:serodt':\n\n    remove_empty_cols\n\nThe following object is masked from 'package:ddpcr':\n\n    remove_empty\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n:::\n\n\n## Methodology\n\n### Standard curves\n\nA 4-parameter logistic model that relates OD (Optical Density) and LC (Log concentration)\n\n$$\nOD = d + \\frac{a - d}{1 + 10^{(LC - c)b}}\n$$\n\nWhere:\n\n-   $a$ is the minimum $OD$ (when the concentration is 0)\n\n-   $d$ is the maximum $OD$ (when the concentration is $+\\infty$)\n\n-   $c$ is the $LC$ of the point of inflexion (where $OD = (d - a)/2$)\n\n-   $b$ is the slope at the inflexion point\n\nAll the functions used for fitting data to the standard curve and converting LC to OD is in the `elisa_funcs.R` file\n\nThe code for analysis is heavily based on the one from this Github page: <https://choisy.github.io/tetanus/analysis.html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"R/elisa_funcs.R\")\n```\n:::\n\n\n## OUCRU samples\n\n### Preparing data\n\nLoad tetanus test results for OUCRU samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_path <- \"./data/raw/oucru/\"\noucru_samples <- lapply(\n  list.files(data_path, full.names = TRUE), \n  \\(file){\n    read_csv(file) %>% \n      clean_names()\n    }\n  )\n```\n:::\n\n\nStandardize data for analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\noucru_samples <- bind_rows(oucru_samples) %>% \n  mutate(\n    sample_id = case_when(\n      !is.na(hc_sample_id) ~ hc_sample_id,\n      !is.na(hu_sample_id) ~ hu_sample_id,\n      !is.na(qn_sample_id) ~ qn_sample_id,\n      .default = NA\n    )\n  ) %>% \n  select(-hc_sample_id, -hu_sample_id, -qn_sample_id) %>% \n  standardize_data(\n    id_col = \"sample_id\",\n    result_col = \"result\",\n    dilution_fct_col = \"dilution_factors\",\n    antitoxin_label = \"Anti_toxin\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(id_col)\n\n  # Now:\n  data %>% select(all_of(id_col))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(result_col)\n\n  # Now:\n  data %>% select(all_of(result_col))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(dilution_fct_col)\n\n  # Now:\n  data %>% select(all_of(dilution_fct_col))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n:::\n\n\n### Standard curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\noucru_plates <- oucru_samples %>% \n    mutate(plate_id = paste0(\"oucru_plate_\", plate_id)) %>% \n    split(.$plate_id)\n\n# For each data from each plate, do the following\n# 1: retrieve the anti-toxins data from all plates\noucru_antitoxins <- map(oucru_plates, get_antitoxins)\n# 2: generate the standard curve with CI in the form of a dataframe\noucru_standard_curve_df <- map(oucru_antitoxins, standard_curve_data, nls4PL)\n# 3: convert the standard curve dataframe into a standard curve function\noucru_standard_curves <- map(oucru_standard_curve_df, data2function)\n# 4: convert the OD of the samples into log-concentrations\noucru_processed_samples <- map2(oucru_plates, oucru_standard_curves, process_samples)\n```\n:::\n\n\nTry plotting standard curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_standard_curve(\n  bind_rows(oucru_standard_curve_df, .id = \"plate_label\"), \n  data = bind_rows(oucru_antitoxins, .id = \"plate_label\"),\n  datapoint_size = 1\n  ) +\n  facet_wrap(~ plate_label)\n```\n\n::: {.cell-output-display}\n![](samples_processing_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nsave necessary data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# saveRDS(oucru_standard_curve_df, \"./data/preprocessed/oucru_standard_curves_df.rds\")\n# saveRDS(oucru_antitoxins, \"./data/preprocessed/oucru_anti_toxins.rds\")\n# saveRDS(oucru_samples, \"./data/preprocessed/oucru_samples_by_plate.rds\")\n```\n:::\n\n\n### Quality control\n\nFor each plate:\n\n-   Get negative controls' OD at different dilution levels\n\n-   Convert to concentration\n\n-   Check which dilution gives positive result (i.e. wrong result)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnegative_controls <- map(oucru_plates, get_negative_controls) \nnegative_controls_conc <- map2(negative_controls, oucru_standard_curves, label_positive) \n\noucru_failed_dilutions <- negative_controls_conc %>% \n  bind_rows(.id = \"plate_label\") %>% \n  filter(positive)\n```\n:::\n\n\n### Process sample data\n\nSelect necessary columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\noucru_processed_samples <- oucru_processed_samples %>% \n  bind_rows() %>% \n  mutate(\n    test_date = as.Date(paste(year, month, day, sep = \"-\"))\n  ) %>% \n  select(\n    sample_id, test_date, dilution_factors, result, lower, median, upper\n  )\n```\n:::\n\n\nGet sample details from `serodt`\n\n\n::: {.cell}\n\n```{.r .cell-code}\noucru_samples_details <- serodt::samples %>%\n  include_hospital() %>% \n  select(\n    hospital, sample_id, gender, exact_age, age_min, age_max, date_collection, province\n  )\n\noucru_tetanus <- oucru_samples_details %>% \n  right_join(oucru_processed_samples, \n             by = join_by(sample_id == sample_id))\n```\n:::\n\n\n## HCDC samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatafile <- \"./data/raw/hcdc/Tetanus_Dr. Thinh_HCDC samples.xlsx\"\n```\n:::\n\n\n### Preparing data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Data preprocessing functions\"}\nremove_empty_plates <- function(x) x[map_lgl(x, ~ ! all(is.na(.x$RESULT)))]\n\nadd_sample_id <- function(x) {\n  id <- x$HCDC_SAMPLE_ID\n  \n  x$HCDC_SAMPLE_ID <- grep(\"Anti\", id, value = TRUE, invert = TRUE) %>% \n    na.exclude() %>% \n    unique() %>% \n    # repeat 3 times for 3 dilution levels\n    rep(each = 3) %>% \n    c(grep(\"Anti\", id, value = TRUE))\n  \n  x\n}\n```\n:::\n\n\nLoad tetanus samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplates <- datafile  %>% \n  excel_sheets() %>% \n  (\\(.x) .x[grepl(\"Plate\", .x)])() %>% \n  (\\(.x) setNames(map(.x, read_excel, path = datafile), .x))() %>% \n  map(~ setNames(.x, toupper(names(.x)))) %>% \n  remove_empty_plates() %>% \n  map(add_sample_id)\n```\n:::\n\n\n### Standard curves\n\nFor each plate, fit the standard curve and estimate the OD\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# standardize data before performing the steps\nstandardized_plates <- map(plates, \\(.){\n  standardize_data(\n    .,\n    id_col = \"HCDC_SAMPLE_ID\",\n    result_col = \"RESULT\",\n    dilution_fct_col = \"DILUTION_FACTORS\",\n    antitoxin_label = \"Anti_toxin\"\n  )\n})\n# step 1: retrieve the anti-toxins data from all plates\nanti_toxins <- map(standardized_plates, get_antitoxins)\n# step 2: generate the standard curve with CI in the form of a dataframe\nstandard_curve_df <- map(anti_toxins, standard_curve_data, nls4PL)\n# step 3: convert the standard curve dataframe into a standard curve function\nstandard_curves <- map(standard_curve_df, data2function)\n# step 4: convert the OD of the samples into log-concentrations\nsamples <- map2(standardized_plates, standard_curves, process_samples)\n```\n:::\n\n\nPlot standard curves for all the plates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_standard_curve(\n  bind_rows(standard_curve_df, .id = \"plate_label\"), \n  data = bind_rows(anti_toxins, .id = \"plate_label\"),\n  datapoint_size = 1\n  ) +\n  facet_wrap(~ plate_label)\n```\n\n::: {.cell-output-display}\n![](samples_processing_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nSave necessary data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# saveRDS(standard_curve_df, \"./data/preprocessed/hcdc_standard_curves_df.rds\")\n# saveRDS(anti_toxins, \"./data/preprocessed/hcdc_anti_toxins.rds\")\n# saveRDS(samples, \"./data/preprocessed/hcdc_samples_by_plate.rds\")\n```\n:::\n\n\n### Quality control\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcdc_negative_controls <- map(standardized_plates, get_negative_controls) \nhcdc_negative_controls_conc <- map2(hcdc_negative_controls, standard_curves, label_positive) \n\nhcdc_failed_dilutions <- negative_controls_conc %>% \n  bind_rows(.id = \"plate_label\") %>% \n  filter(positive)\n\nhcdc_failed_dilutions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 7\n# ℹ 7 variables: plate_label <chr>, dilution <int>, od <dbl>, lower <dbl>,\n#   median <dbl>, upper <dbl>, positive <lgl>\n```\n:::\n:::\n\n\n### Process sample data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcdc_samples <- samples %>% \n  bind_rows(, .id = \"plate_label\") %>% \n  clean_names() %>% \n  mutate(\n    test_date = as.Date(paste(year, month, day, sep = \"-\"))\n  ) %>% \n  select(\n    sample_id, test_date, dilution_factors, result, lower, median, upper\n  )\n```\n:::\n\n\nGet samples details\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_details <- read_excel(\n  datafile,\n  sheet = \"Sheet1\",\n  skip = 5\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expecting numeric in AB51 / R51C28: got a date\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...16`\n• `` -> `...17`\n• `` -> `...18`\n• `` -> `...19`\n• `` -> `...20`\n• `` -> `...21`\n• `` -> `...22`\n• `` -> `...23`\n• `` -> `...24`\n• `` -> `...25`\n• `` -> `...26`\n• `` -> `...27`\n• `` -> `...28`\n• `` -> `...29`\n• `` -> `...30`\n```\n:::\n\n```{.r .cell-code}\nsample_details <- sample_details %>% \n  clean_names() %>% \n  select(\n    benh_vien, ma_so, ngay_thang_nam_sinh, gioi_tinh, quan_huyen, tinh_tp,\n    ngay_lay_mau, the_tich_ml\n  ) %>% \n  rename(\n    hospital = benh_vien, sample_id = ma_so,\n    dob = ngay_thang_nam_sinh, gender = gioi_tinh, district = quan_huyen,\n    province = tinh_tp, date_collection = ngay_lay_mau, vol_ml = the_tich_ml\n  )\n```\n:::\n\n\nCreate tetanus dataset for HCDC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcdc_tetanus <- sample_details %>% \n  right_join(\n    hcdc_samples,\n    by = join_by(sample_id == sample_id)\n  ) %>% \n  mutate(\n    gender = fct_recode(\n      gender, \"male\" = \"Nam\", \"female\" = \"Nữ\"\n    )\n  )\n```\n:::\n\n\n## Combine samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntetanus_samples <- bind_rows(\n  oucru_tetanus,\n  hcdc_tetanus\n) %>% \n  mutate(\n    province = if_else(\n      province %in% c(\"HCMC\", \"Hồ Chí Minh\", \"HỒ CHÍ MINH\"),\n      \"HCMC\",\n      province\n    )\n  )\n```\n:::\n\n\nPreprocess the age data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(tetanus_samples, \"data/preprocessed/all_samples.rds\")\n```\n:::\n",
    "supporting": [
      "samples_processing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}